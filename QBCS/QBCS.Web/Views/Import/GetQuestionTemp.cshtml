@model QBCS.Service.ViewModel.QuestionTempViewModel

@{
    ViewBag.Title = "Edit Question";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string alpha = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
    int counter = 0;
}

@Styles.Render("~/bundle/content/detailquestion")
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Edit Question</h6>
    </div>

    <div class="card-body">
        <div class="container text-custom">
            @using (Html.BeginForm("EditQuestion", "Import", FormMethod.Post, new { @class = "form-group" }))
            {

                <h5>Question</h5>
                <div class="customs-display customs-display-area question-custom mb-2" contenteditable="true" data-for="#hidden-question-content">
                    @Html.DisplayFor(m => m.QuestionContent)
                    @if (Model.Image != null)
                    {
                        <p><img class="exam-image" onclick="img_zoom(this)" src="data:image/png;base64, @Model.Image" /></p>
                    }
                </div>
                <input type="hidden" name="QuestionContent" value="" id="hidden-question-content" />

                <h5>Options</h5>
                <div id="option-list-container">

                    @for (var i = 0; i < Model.Options.Count; i++)
                    {
                        @Html.EditorFor(m => m.Options[i], new { index = i + 1 })
                    }
                </div>
                <div class="row mb-4">
                    <span class="text-primary add-option"><i class="fa fa-plus-circle"></i> Add Option</span>
                </div>




                @Html.HiddenFor(model => model.ImportId)
                @Html.HiddenFor(model => model.Id)
                <input type="submit" name="Save" class="btn btn-primary float-right" id="btnUpdate" />
                <a class="btn btn-default float-right" href="@Url.Action("GetResult", "Import",new { importId  = Model.ImportId})">Cancel</a>
            }
        </div>
    </div>
</div>
@*@if (Model.Status == QBCS.Service.Enum.StatusEnum.Editable
        || Model.Status == QBCS.Service.Enum.StatusEnum.Deleted
        || Model.Status == QBCS.Service.Enum.StatusEnum.DeleteOrSkip)
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-custom">Duplicated Question</h6>
            </div>

            <div class="card-body text-custom custom-display-p" id="customs-display-duplicate">

                @Html.DisplayFor(modeItem => Model.DuplicatedQuestion.QuestionContent)
                @if (Model.DuplicatedQuestion.Image != null)
                {
                <p><img class="exam-image" onclick="img_zoom(this)" src="data:image/png;base64, @Model.DuplicatedQuestion.Image" /></p>
                }
                @for (var i = 0; i < Model.DuplicatedQuestion.Options.Count; i++)
                {
                    if (Model.DuplicatedQuestion.Options[i].IsCorrect == true)
                    {
                        <div class="container-fluid text-right-answer">
                            @(alpha[i] + ".") @Html.DisplayFor(optionItem => Model.DuplicatedQuestion.Options[i].OptionContent)
                        </div>
                    }
                    else
                    {
                        <div class="container-fluid">
                            @(alpha[i] + ".") @Html.DisplayFor(optionItem => Model.DuplicatedQuestion.Options[i].OptionContent)
                        </div>
                    }

                    <br />
                }

            </div>
        </div>
    }*@

@Scripts.Render("~/bundles/script/processtext")