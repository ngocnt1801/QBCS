@model QBCS.Service.ViewModel.ImportResultViewModel
@using QBCS.Service.Enum

@{
    /**/

    ViewBag.Title = "GetResult";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Styles.Render("~/bundles/content/datatables")
@Styles.Render("~/bundle/content/tab")

<h2>Result</h2>
@{

    int total = Model.Questions.Count;
    int editable = Model.Questions.Where(q => q.Status == StatusEnum.Editable).Count();
    int delete = Model.Questions.Where(q => q.Status == StatusEnum.Deleted).Count();
    int success = Model.Questions.Where(q => q.Status == StatusEnum.Success).Count();
    int invalid = Model.Questions.Where(q => q.Status == StatusEnum.Invalid).Count();

    <div id="question-import">
        <div class="tabs tabs-style-topline">
            <nav>
                <ul>
                    <li><a href="#section-topline-1"><span>Editable (<span id="total-edit">@editable</span>/@total)</span></a></li>
                    <li><a href="#section-topline-3"><span>Sucess (<span id="total-success">@success</span>/@total)</span></a></li>
                    <li><a href="#section-topline-4"><span>Invalid (<span id="total-invalid">@invalid</span>/@total)</span></a></li>
                    <li><a href="#section-topline-4"><span>Delete (<span id="total-delete">@delete</span>/@total)</span></a></li>
                </ul>
            </nav>
            <div class="content-wrap">
                <section id="section-topline-1">
                    @*@{
                            var editList = Model.Questions.Where(q => q.Status == StatusEnum.Editable);

                            var importFile = "active toggle-table";
                            var bank = "toggle-table";
                            var importFileHidden = "";
                            var bankHidden = "hidden";

                            if (editList.Where(q => q.IsInImportFile).Count() > 0)
                            {
                                if (editList.Where(q => !q.IsInImportFile).Count() == 0)
                                {
                                    bank = "disabled";
                                }
                            }
                            else
                            {
                                if (editList.Where(q => !q.IsInImportFile).Count() > 0)
                                {
                                    bank = "active toggle-table";
                                    importFile = "disabled";
                                    bankHidden = "";
                                    importFileHidden = "hidden";
                                }
                            }

                        }
                        <div class="mb-4">
                            <span class="text-custom align-middle mr-4">Duplicated with:</span>
                            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                                <label class="btn btn-outline-dark @importFile" data-toggle="#importfile-duplicate">
                                    <input type="radio" name="options" autocomplete="off" checked> Import file
                                </label>
                                <label class="btn btn-outline-dark @bank" data-toggle="#bank-duplicate">
                                    <input type="radio" name="options" autocomplete="off"> Bank
                                </label>
                            </div>
                        </div>

                        <div class="@importFileHidden table-toggle" id="importfile-duplicate">
                            @Html.Partial("_ListQuestionWithDuplicate", editList.Where(q => q.IsInImportFile).ToList(), new ViewDataDictionary { { "tableId", "tableEditable" }, { "importId", Model.Id } })
                        </div>
                        <div class="@bankHidden table-toggle" id="bank-duplicate">
                            @Html.Partial("_ListQuestionWithDuplicate", editList.Where(q => !q.IsInImportFile).ToList(), new ViewDataDictionary { { "tableId", "tableEditable" }, { "importId", Model.Id } })
                        </div>*@
                    @Html.Partial("_ListQuestionWithDuplicate", Model.Questions.Where(q => q.Status == StatusEnum.Editable).ToList(), new ViewDataDictionary { { "tableId", "tableEditable" }, { "importId", Model.Id } })
                </section>

                <section id="section-topline-3">
                    @Html.Partial("_ListQuestionWithDuplicate", Model.Questions.Where(q => q.Status == StatusEnum.Success).ToList(), new ViewDataDictionary { { "tableId", "tableSuccess" }, { "importId", Model.Id } })
                </section>
                <section id="section-topline-4">
                    @Html.Partial("_ListQuestionWithDuplicate", Model.Questions.Where(q => q.Status == StatusEnum.Invalid).ToList(), new ViewDataDictionary { { "tableId", "tableInvalid" }, { "importId", Model.Id } })
                </section>
                <section id="section-topline-2">
                    @Html.Partial("_ListQuestionWithDuplicate", Model.Questions.Where(q => q.Status == StatusEnum.Deleted).ToList(), new ViewDataDictionary { { "tableId", "tableDelete" }, { "importId", Model.Id } })
                </section>
            </div><!-- /content -->
        </div><!-- /tabs -->

    </div>



    <div class="modal fade" tabindex="-1" role="dialog" id="import-modal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <p>Are your sure want to save these questions?</p>
                    <p>- <b>@Model.Questions.Where(q => q.Status == StatusEnum.Editable || q.Status == StatusEnum.Deleted || q.Status == StatusEnum.Invalid).Count()/@Model.Questions.Count</b> will not insert to bank</p>
                    <p>- <b>@Model.Questions.Where(q => q.Status == StatusEnum.NotCheck).Count()/@Model.Questions.Count</b> will be checked again</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="import-btn" data-id="@Model.Id">OK</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->

    <div class="modal fade" tabindex="-1" role="dialog" id="cancel-import-modal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <p>Are your sure want cancel this?</p>
                    <p>All your question in this import will be removed</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default spinner-loading" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary spinner-loading" id="cancel-import-btn" data-id="@Model.Id">OK</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
}
@Scripts.Render("~/bundles/script/datatables")
@Scripts.Render("~/bundle/scripts/tab")
@Scripts.Render("~/bundle/scripts/tabresult")
@Scripts.Render("~/bundle/scripts/importfile")