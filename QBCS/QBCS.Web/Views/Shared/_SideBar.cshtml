@using QBCS.Service.ViewModel

@{
    string[] NAV_ICON =
         {
    "",
    "fa fa-upload",
    "fa fa-home",
    "fa fa-home",
    "",
    "fa fa-history",
    "fa fa-folder",
    "fa fa-folder",
    "fa fa-chart-line",
    "fa fa-question",
    "fa fa-list-ul",
    "fa fa-file",
    "fa fa-user",
    "fa fa-list-ul",
    "fa fa-chart-line",
    "fa fa-history",
    };
}

<ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

    <!-- Sidebar - Brand -->
    <a class="sidebar-brand d-flex align-items-center justify-content-center" href="#">
        <div class="sidebar-brand-icon pt-4" style="width:50%">
            <img src="~/Content/logo_transparent.png" style="object-fit: contain;" width="120" height="140" />
        </div>
        <div class="sidebar-brand-text mr-5"><h4 class="font-weight-bolder">QBCS</h4></div>
    </a>

    @{
        var sidebar = Session[AuthLib.Constant.SIDE_BAR_SESSION] as List<AuthLib.Models.SideBarModel>;
    }

    @if (sidebar.Where(s => s.InternalId.HasValue && s.InternalId.Value == (int)QBCS.Service.Enum.SideBarEnum.Import).Any())
    {
        <li class="nav-item">
            <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                <i class="@NAV_ICON[(int)QBCS.Service.Enum.SideBarEnum.Import]"></i>
                <span>Import</span>
            </a>
            <div id="collapseTwo" class="collapse show" aria-labelledby="headingTwo" data-parent="#accordionSidebar">
                <div class="bg-white py-2 collapse-inner rounded">
                    <h6 class="collapse-header">Import from:</h6>
                    <a class="collapse-item @((TempData["active"] as string).Equals("Import") ? "active" : "")" href="@Url.Action("Index", "Home")">File Moodle</a>
                    @if (sidebar.Where(s => s.InternalId.HasValue && s.InternalId.Value == (int)QBCS.Service.Enum.SideBarEnum.ImportMSWord).Any())
                    {
                        <a class="collapse-item @((TempData["active"] as string).Equals("ImportWord") ? "active" : "")" href="@Url.Action("ImportWord", "Home")">File MS Word</a>
                    }
                    @if (sidebar.Where(s => s.InternalId.HasValue && s.InternalId.Value == (int)QBCS.Service.Enum.SideBarEnum.Manually).Any())
                    {
                        <a class="collapse-item @((TempData["active"] as string).Equals("Manually") ? "active" : "")" href="@Url.Action("ImportWithTextArea", "Home")">Manually</a>
                    }
                </div>
            </div>
        </li>
    }


    @foreach (var item in sidebar.OrderBy(s => s.InternalId))
    {

        if (item.IsInternal
            && item.InternalId != (int)QBCS.Service.Enum.SideBarEnum.Import
            && item.InternalId != (int)QBCS.Service.Enum.SideBarEnum.ImportMSWord
            && item.InternalId != (int)QBCS.Service.Enum.SideBarEnum.Manually)
        {
            <hr class="sidebar-divider my-0">
            <li class="nav-item  @((TempData["active"] as string).Equals(item.ShortName) ? "active" : "")">
                <a class="nav-link" href="@(Context.GetOwinContext().Request.PathBase.Value + (item.Url))">
                    <i class="@NAV_ICON[item.InternalId.HasValue ? item.InternalId.Value : 0]"></i>
                    <span>@item.ShortName</span>
                </a>
            </li>
        }

    }

    <!-- Sidebar Toggler (Sidebar) -->
    <div class="text-center d-none d-md-inline">
        <button class="rounded-circle border-0" id="sidebarToggle"></button>
    </div>

</ul>
